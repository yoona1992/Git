
@{
    ViewBag.Title = "FormLayout/TrajectoryMap";
    var F = Html.F();
}

@F.PageManager.AutoSizePanelID("Panel_TrajectoryMap")

@section body {

    @(F.Panel().ID("Panel_TrajectoryMap").ShowBorder(false).ShowHeader(false).Layout(LayoutType.Fit)
            .Toolbars(
                    F.Toolbar().ID("Toolbar1")
                        .Items(
                            F.Button().ID("btnStart").Text("开始").IconFont(IconFont.Play).Listener("click", "onbtnStartClick"),
                            F.Button().ID("btnPause").Text("暂停").IconFont(IconFont.Pause).Listener("click", "onbtnPauseClick"),
                            F.Button().ID("btnStop").Text("停止").IconFont(IconFont.Stop).Listener("click", "onbtnStopClick")
                        )
                )
            .Items(
                F.TextBox().ID("TelePhone").Text(Request.QueryString["telephone"]).Hidden(true),
                F.TextBox().ID("UserName").Text(Request.QueryString["username"]).Hidden(true),
                F.TextBox().ID("PassTime").Text(Request.QueryString["passtime"]).Hidden(true),
                F.Form().ID("Form_TrajectoryMap").ShowHeader(true).ShowBorder(false)
            )
    )
    )
}


@section script {
    <script src="~/res/js/grid.js"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=A6bc8cb4539b007f51e8aa5ef37ed431"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/LuShu/1.2/src/LuShu_min.js"></script>
    <script>
        var map = [];
        var overlays = [];
        var marker;
        var lushu;
        var allData = [];
        var arrPois = [];
        //开始
        function onbtnStartClick(event) {
            marker.enableMassClear(); //设置后可以隐藏改点的覆盖物
            //map.setZoom(17);
            marker.hide();
            lushu.start();
        }

        //暂停
        function onbtnPauseClick(event) {
            lushu.pause();
        }

        //停止
        function onbtnStopClick(event) {
            lushu.stop();
        }

        F.ready(function () {
            // 百度地图API功能
            map = new BMap.Map("Form_TrajectoryMap");
            map.enableScrollWheelZoom();
            map.centerAndZoom("练市", 16);
            var top_right_navigation = new BMap.NavigationControl({
                anchor: BMAP_ANCHOR_TOP_RIGHT
            }); //右上角
            map.addControl(top_right_navigation);
            $.ajax({
                url: "./GetList_User",
                data: {
                    telephone: F.ui.TelePhone.getValue(),
                    passTime: F.ui.PassTime.getValue()
                },
                type: "post",
                async: false,
                success: function (data) {
                    allData = data;
                    $.each(data, function (index, d) {
                        arrPois.push(new BMap.Point(d.Lon, d.Lat));
                    });
                }
            });

            if (arrPois.length != 0) {
                map.setViewport(arrPois);
                marker = new BMap.Marker(arrPois[0], {
                    icon: new BMap.Icon('../../res/images/i/car.png', new BMap.Size(52, 26), { anchor: new BMap.Size(27, 13) })
                });
                var label = new BMap.Label(F.ui.UserName.getValue(), { offset: new BMap.Size(0, -30) });
                label.setStyle({ border: "1px solid rgb(204, 204, 204)", color: "rgb(0, 0, 0)", borderRadius: "10px", padding: "5px", background: "rgb(255, 255, 255)", });
                marker.setLabel(label);

                map.addOverlay(marker);
                BMapLib.LuShu.prototype._move = function (initPos, targetPos, effect) {
                    var pointsArr = [initPos, targetPos];  //点数组
                    var me = this,
                        //当前的帧数
                        currentCount = 0,
                        //步长，米/秒
                        timer = 10,
                        step = this._opts.speed / (1000 / timer),
                        //初始坐标
                        init_pos = this._projection.lngLatToPoint(initPos),
                        //获取结束点的(x,y)坐标
                        target_pos = this._projection.lngLatToPoint(targetPos),
                        //总的步长
                        count = Math.round(me._getDistance(init_pos, target_pos) / step);
                    //如果小于1直接移动到下一点
                    if (count < 1) {
                        me._moveNext(++me.i);
                        return;
                    }
                    me._intervalFlag = setInterval(function () {
                        //两点之间当前帧数大于总帧数的时候，则说明已经完成移动
                        if (currentCount >= count) {
                            clearInterval(me._intervalFlag);
                            //移动的点已经超过总的长度
                            if (me.i > me._path.length) {
                                return;
                            }
                            //运行下一个点
                            me._moveNext(++me.i);
                        } else {
                            currentCount++;
                            var x = effect(init_pos.x, target_pos.x, currentCount, count),
                                y = effect(init_pos.y, target_pos.y, currentCount, count),
                                pos = me._projection.pointToLngLat(new BMap.Pixel(x, y));
                            //设置marker
                            if (currentCount == 1) {
                                var proPos = null;
                                if (me.i - 1 >= 0) {
                                    proPos = me._path[me.i - 1];
                                }
                                if (me._opts.enableRotation == true) {
                                    me.setRotation(proPos, initPos, targetPos);
                                }
                                if (me._opts.autoView) {
                                    if (!me._map.getBounds().containsPoint(pos)) {
                                        me._map.setCenter(pos);
                                    }
                                }
                            }
                            //正在移动
                            me._marker.setPosition(pos);
                            //设置自定义overlay的位置
                            me._setInfoWin(pos);
                        }
                    }, timer);
                };

                map.addOverlay(new BMap.Polyline(arrPois, { strokeColor: '#111' }));
                lushu = new BMapLib.LuShu(map, arrPois, {
                    defaultContent: F.ui.UserName.getValue(),//"从天安门到百度大厦"
                    autoView: true,//是否开启自动视野调整，如果开启那么路书在运动过程中会根据视野自动调整
                    icon: new BMap.Icon('../../res/images/i/car.png', new BMap.Size(52, 26), { anchor: new BMap.Size(27, 13) }),
                    speed: 500,
                    enableRotation: true,//是否设置marker随着道路的走向进行旋转
                    landmarkPois: [
                    ]

                });
            }
        });
    </script>
}

